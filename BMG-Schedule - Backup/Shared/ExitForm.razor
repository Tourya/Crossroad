@if (Exit is not null)
{
    <EditForm Model="Exit" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>Служител: @Employee?.FirstName @Employee?.LastName</div>
        <br />
        <div class="col-md-6 border border-light">
            <h6 class="ms-3 mt-3" style="color:darkgray">Начало</h6>
            <br />
            <div class="pb-3 ms-3 d-md-flex justify-content-between">
                <div class="d-md-flex">
                    <label for="startDate" class="col-form-label">Дата:</label>
                    @*<InputDate Type="InputDateType.Date" id="startDate" class="form-control ms-2" @bind-Value="Exit.Start"></InputDate>*@
                    <InputDate Type="InputDateType.DateTimeLocal" id="startDateTime" class="form-control ms-2" @bind-Value="Exit!.Start"></InputDate>
                </div>
                @*<div class="d-md-flex">
            <label for="startTime" class="col-form-label">Час:</label>
            <InputDate Type="InputDateType.Time" id="startTime" class="form-control ms-2" @bind-Value="Exit.Start"></InputDate>
            </div>*@
                <br />
            </div>
        </div>
        <br />
        <div class="col-md-6 border border-light">
            <h6 class="ms-3 mt-3" style="color:darkgray">Край</h6>
            <br />
            <div class="pb-3 ms-3 d-md-flex justify-content-md-between">
                <div class="d-md-flex">
                    <label for="startDate" class="col-form-label">Дата: </label>
                    <InputDate Type="InputDateType.DateTimeLocal" id="endDateTime" class="form-control ms-2" onchange="@(EndDate = Exit.End)" @bind-Value="Exit.End"></InputDate>
                </div>
                @*<div class="d-md-flex">
            <label for="startTime" class="col-form-label">Час: </label>
            <InputDate Type="InputDateType.Time" id="startTime" class="form-control ms-3" @bind-Value="Exit.End"></InputDate>
            </div>*@
                <br />
            </div>
        </div>
        <br />
        <div class="ms-3 d-md-flex">
            <label for="others" class="form-label">Други: </label>
            <InputSelect class="ms-2 form-select-sm" id="others" @bind-Value="SelectedRecordTypeId">
                @if (OthersDropdown is not null)
                {
                    <option selected disabled hidden>Въведете</option>
                    @foreach (var record in OthersDropdown)
                    {
                        <option value="@record.Id">@(record.Name == "Работен ден" ? "Край на работен ден" : @record.Name)</option>
                    }
                }
            </InputSelect>
            @if (SelectedRecordTypeId != 1 && SelectedRecordTypeId != null)
            {
                <div>
                    <label for="numberOfDays" class="ms-3">Брой дни:</label>
                    <input id="numberOfDays" min="1" step="1" class="form-select-sm col-md-3 ms-2" @bind-value="NumberOfDays" type="number" />
                </div>
            }
        </div>
        <br />
        <div class="d-md-flex">
            <InputCheckbox class="ms-2 form-check-input" id="isPersonal" @bind-Value="Exit.IsPersonal"></InputCheckbox>
            <label for="isPersonal" class="form-label ms-2">Лично</label>
        </div>
        <br />
        <div class="d-grid">
            <label for="reason">Причина:</label>
            <InputTextArea id="reason" placeholder="Въведете текст (до 1000 символа)." rows="3" class="col-md-6" @bind-Value="Exit.Reason"></InputTextArea>
        </div>
        <br />
        <br />
        <div class="col-md-6 d-md-grid gap-md-5 d-md-flex justify-content-md-start">
            <button type="submit" class="btn btn-sm btn-outline-primary">Запази</button>
            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => HandleDelete()">Изтрий</button>
            <button type="button" class="btn btn-sm btn-outline-secondary ms-5" @onclick="HandleCancel">Затвори</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Exit? Exit { get; set; }

    [Parameter]
    public Employee? Employee { get; set; }

    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public DateTime EndDate { get; set; }

    [Parameter]
    public IEnumerable<RecordType>? OthersDropdown { get; set; }

    [Parameter]
    public int? SelectedRecordTypeId { get; set; }

    [Parameter]
    public int NumberOfDays { get; set; } = 1;

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }



    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }

    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private async Task HandleDelete()
    {
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync();
        }
    }
}