@page "/administrative/employee/add"
@using Microsoft.AspNetCore.Identity;
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

<PageTitle>Нов служител</PageTitle>

<h5 class="col-md-3 d-md-flex justify-content-md-center">Нов служител</h5>

<EditForm Model="Employee" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-3">
        <label for="firstName" class="form-label">Име: </label>
        <InputText id="firstName" class="form-control col-sm-10" @bind-Value="Employee!.FirstName"></InputText>
        @* <ValidationMessage For="() => Employee.FirstName" />*@
    </div>
    <br />
    <div class="col-md-3">
        <label for="lastName" class="form-label">Фамилия: </label>
        <InputText id="lastName" class="form-control" @bind-Value="Employee!.LastName"></InputText>
        @*<ValidationMessage For="() => Employee.LastName" />*@
    </div>
    <br />
    <div class="col-md-3">
        <label for="info" class="form-label">Служител: </label>
        <InputText id="info" class="form-control" @bind-Value="Employee!.Info"></InputText>
    </div>
    <br />
    <div class="col-md-3">
        <label for="email" class="form-label">Имейл: </label>
        <InputText id="email" class="form-control" @bind-Value="Email"></InputText>
    </div>
    <br />
    <div class="col-md-3">
        <label for="password" class="form-label">Парола: </label>
        <InputText id="password" type="password" class="form-control" @bind-Value="Password"></InputText>
    </div>
    <br />
    <div class="col-md-3">
        <label for="confirmPassword" class="form-label">Повтори паролата: </label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="ConfirmPassword"></InputText>
    </div>
    <br />
    <div>
        <InputCheckbox id="isAdmin" class="form-check-input" @bind-Value="isAdmin"></InputCheckbox>
        <label for="isAdmin" class="form-label">Администратор</label>
    </div>
    <br />
    <div class="col-md-3 d-grid gap-3 d-md-flex justify-content-md-center">
        <button type="submit" class="btn btn-primary">Запиши</button>
        <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Затвори</button>
    </div>
    <br />

</EditForm>

@if (SuccessMessage is not null)
{
    <br />
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger">@ErrorMessage</div>
}


@code {
    private Employee? Employee { get; set; }
    private bool IsBusy { get; set; }
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private string? Password { get; set; }
    private string? ConfirmPassword { get; set; }
    private string? Email { get; set; }

    private bool isAdmin { get; set; }

    protected override void OnInitialized()
    {
        Employee = new();
    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        if (Employee is not null)
        {
            try
            {
                using var context = ContextFactory.CreateDbContext();

                if (Email is null)
                {
                    throw new ArgumentNullException("Полето \"Имейл\" е задължително.");
                }

                Employee.UserName = Email;
                Employee.NormalizedUserName = Email.ToUpper();
                Employee.Email = Email;
                Employee.NormalizedEmail = Email.ToUpper();
                Employee.SecurityStamp = Guid.NewGuid().ToString();

                if (Password == null || ConfirmPassword == null)
                {
                    throw new ArgumentNullException("Полето \"Парола\" и \"Повтори паролата\" са задължителни.");
                }
                if (Password?.ToUpper() == ConfirmPassword?.ToUpper())
                {
                    Employee.PasswordHash = new PasswordHasher<Employee>().HashPassword(new Employee(), Password);
                }

                context.Employees.Add(Employee);
                await context.SaveChangesAsync();

                var newEmployee = context.Employees.OrderBy(emp => emp.Id).Last();

                IdentityUserRole<int> newRole = new()
                    {
                        RoleId = 1,
                        UserId = newEmployee.Id
                    };

                if (isAdmin)
                {
                    newRole.RoleId = 2;
                }

                var newWorkingDay = new WorkingDay
                    {
                        RecordTypeId = 1,
                        EmployeeId = newEmployee.Id
                    };

                context.UserRoles.Add(newRole);
                context.WorkingDays.Add(newWorkingDay);
                await context.SaveChangesAsync();

                SuccessMessage = $"Служител {Employee.FirstName} {Employee.LastName} беше добавен успешно!";
                ErrorMessage = null;
            }
            catch (Exception ex)
            {
                SuccessMessage = null;
                ErrorMessage = $"Грешка при добавяне на служител: {ex.Message}";
            }
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo($"/administrative/mainPage/{StateContainer.AdministrativeOverviewPage}");
    }
}