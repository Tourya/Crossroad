@page "/administrative/employeeDetails/{employeeId:int}"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager


<PageTitle>Детайли за служител</PageTitle>
@*<AdministrativeOverview CurrentPage="@currentPage" />*@

<div class="container">
    <div class="col-md-12 border border-light">
        <h6 style="color:darkgray">Работно време</h6>
        <br />
        <div class="col-md-6 d-grid d-md-flex">
            <div>Служител: @Employee?.FirstName @Employee?.LastName</div>
            <div class="offset-2">Месец: @DisplayMonth(Month) @Year</div>
        </div>
        <br />
        <button class="btn btn-outline-primary">Ново излизане</button>
    </div>
    <br />
    <div class="container">
        <div class="row">
            <div class="col-6 border border-light">
                <h6 style="color:darkgray">Излизания</h6>

            </div>

            <div class="col-5 offset-1 border border-light">
                <h6 style="color:darkgray">Други</h6>

            </div>
        </div>
    </div>
    <br />
    <div class="col-md-3 d-grid gap-3 d-md-flex">
        <button class="btn btn-outline-primary">Експорт към Excel</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="HandleCancel">Назад</button>
    </div>
</div>


@code {
    [Parameter]
    public int EmployeeId { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    private Employee? Employee { get; set; }

    private WorkingDay[]? WorkingDays { get; set; }

    private bool IsBusy { get; set; }

    private string? ErrorMessage { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        Month = DateTime.Now.Month;
        Year = DateTime.Now.Year;

        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();


        Employee = await context.Employees
                                .AsNoTracking()
                                .Include(emp => emp.WorkingDays)
                                .FirstOrDefaultAsync(emp => emp.Id == EmployeeId);

        WorkingDays = await context.WorkingDays
                                   .AsNoTracking()
                                   .Where(emp => emp.Id == EmployeeId)
                                   .Where(day => day.Start.Month == Month)
                                   .OrderBy(day => day.Start)
                                   .ToArrayAsync();
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo($"/administrative/mainPage/{StateContainer.AdministrativeOverviewPage}");
    }

}

@functions {
    public string DisplayMonth(int month)
    {
        var displayMonth = "";

        switch (month)
        {
            case 1:
                displayMonth = "Януари";
                break;
            case 2:
                displayMonth = "Февруари";
                break;
            case 3:
                displayMonth = "Март";
                break;
            case 4:
                displayMonth = "Април";
                break;
            case 5:
                displayMonth = "Май";
                break;
            case 6:
                displayMonth = "Юни";
                break;
            case 7:
                displayMonth = "Юли";
                break;
            case 8:
                displayMonth = "Август";
                break;
            case 9:
                displayMonth = "Септември";
                break;
            case 10:
                displayMonth = "Октомври";
                break;
            case 11:
                displayMonth = "Ноември";
                break;
            case 12:
                displayMonth = "Декемпври";
                break;
        }

        return displayMonth;
    }
}