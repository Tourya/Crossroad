@page "/administrative/employeeDetails/{employeeId:int}/{exitId:int}"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<PageTitle>Излизане</PageTitle>

@if (Exit is null && !IsBusy)
{
    <div class="alert alert-danger">Излизане с Id @ExitId не беше намерено.</div>
}
else if (Exit is not null)
{
    <EditForm Model="Exit" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>Служител: @Employee?.FirstName @Employee?.LastName</div>
        <br />
        <div class="col-md-6 border border-light">
            <h6 class="ms-3 mt-3" style="color:darkgray">Начало</h6>
            <br />
            <div class="pb-3 ms-3 d-md-flex justify-content-between">
                <div class="d-md-flex">
                    <label for="startDate" class="col-form-label">Дата:</label>
                    @*<InputDate Type="InputDateType.Date" id="startDate" class="form-control ms-2" @bind-Value="Exit.Start"></InputDate>*@
                    <InputDate Type="InputDateType.DateTimeLocal" id="startDateTime" class="form-control ms-2" @bind-Value="Exit.Start"></InputDate>
                </div>
                @*<div class="d-md-flex">
            <label for="startTime" class="col-form-label">Час:</label>
            <InputDate Type="InputDateType.Time" id="startTime" class="form-control ms-2" @bind-Value="Exit.Start"></InputDate>
            </div>*@
                <br />
            </div>
        </div>
        <br />
        <div class="col-md-6 border border-light">
            <h6 class="ms-3 mt-3" style="color:darkgray">Край</h6>
            <br />
            <div class="pb-3 ms-3 d-md-flex justify-content-md-between">
                <div class="d-md-flex">
                    <label for="startDate" class="col-form-label">Дата: </label>
                    <InputDate Type="InputDateType.DateTimeLocal" id="endDateTime" class="form-control ms-2" onchange="@(EndDate = Exit.End)" @bind-Value="Exit.End"></InputDate>
                </div>
                @*<div class="d-md-flex">
            <label for="startTime" class="col-form-label">Час: </label>
            <InputDate Type="InputDateType.Time" id="startTime" class="form-control ms-3" @bind-Value="Exit.End"></InputDate>
            </div>*@
                <br />
            </div>
        </div>
        <br />
        <div class="ms-3 d-md-flex">
            <label for="others" class="form-label">Други: </label>
            <InputSelect class="ms-2 form-select-sm" id="others" @bind-Value="SelectedRecordTypeId">
                @if (OthersDropdown is not null)
                {
                    <option selected disabled hidden>Въведете</option>
                    @foreach (var record in OthersDropdown)
                    {
                        <option value="@record.Id">@(record.Name == "Работен ден" ? "Край на работен ден" : @record.Name)</option>
                    }
                }
            </InputSelect>
            @if (SelectedRecordTypeId != 1 && SelectedRecordTypeId != null)
            {
                <div>
                    <label for="numberOfDays" class="ms-3">Брой дни:</label>
                    <input id="numberOfDays" min="0" step="1" class="form-select-sm col-md-3 ms-2" @bind-value="NumberOfDays" type="number" />
                </div>
            }
        </div>
        <br />
        <div class="d-md-flex">
            <InputCheckbox class="ms-2 form-check-input" id="isPersonal" @bind-Value="Exit.IsPersonal"></InputCheckbox>
            <label for="isPersonal" class="form-label ms-2">Лично</label>
        </div>
        <br />
        <div class="d-grid">
            <label for="reason">Причина:</label>
            <InputTextArea id="reason" placeholder="Въведете текст (до 1000 символа)." rows="3" class="col-md-6" @bind-Value="Exit.Reason"></InputTextArea>
        </div>
        <br />
        <br />
        <div class="col-md-6 d-md-grid gap-md-5 d-md-flex justify-content-md-start">
            <button type="submit" class="btn btn-sm btn-outline-primary">Запази</button>
            <button type="button" class="btn btn-sm btn-outline-danger">Изтрий</button>
            <button type="button" class="btn btn-sm btn-outline-secondary ms-5" @onclick="HandleCancel">Затвори</button>
        </div>
    </EditForm>

}

@if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger">@ErrorMessage</div>
}


@code {
    [Parameter]
    public int EmployeeId { get; set; }

    [Parameter]
    public int ExitId { get; set; }

    [Parameter]
    public int? SelectedRecordTypeId { get; set; }

    [Parameter]
    public int NumberOfDays { get; set; }

    private Exit? Exit { get; set; }

    private Employee? Employee { get; set; }

    private WorkingDay? WorkingDay { get; set; }

    private IEnumerable<RecordType>? OthersDropdown { get; set; }

    private DateTime EndDate { get; set; }

    private bool IsBusy { get; set; }

    private string? ErrorMessage { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();

        Exit = await context.Exits.FirstOrDefaultAsync(ex => ex.Id == ExitId);

        WorkingDay = await context.WorkingDays.FirstOrDefaultAsync(wd => wd.ExitId == ExitId);

        OthersDropdown = await context.RecordTypes.ToArrayAsync();

        Employee = await context.Employees
                                .AsNoTracking()
                                .Include(emp => emp.WorkingDays)
                                .Include(emp => emp.Exits)
                                .FirstOrDefaultAsync(emp => emp.Id == EmployeeId);
    }


    private async Task HandleValidSubmit()
    {
        if (Exit is null || IsBusy)
        {
            ErrorMessage = null;
            return;
        }

        IsBusy = true;

        using var context = ContextFactory.CreateDbContext();
        int workingDayId = Exit.WorkingDayId;

        try
        {
            if (SelectedRecordTypeId == null)
            {
                if (Exit.Start.Date > Exit.End.Date)
                {
                    throw new ArgumentException("Датата за начало на излизането трябва да бъде по-малка от датата за край на излизането!");
                }

                if (Exit.Start.TimeOfDay > Exit.End.TimeOfDay)
                {
                    throw new ArgumentException("Часът за край на излизането трябва да бъде по-голям от часът за начало на излизането!");
                }
            }
            else if (SelectedRecordTypeId == 1)
            {
                if (WorkingDay is not null)
                {
                    if (WorkingDay.Start > WorkingDay.End)
                    {
                        throw new ArgumentException("Датата и часът за край на работния трябва да бъдат по-големи от датата и часа за начало на работния ден!");
                    }

                    WorkingDay.End = EndDate;
                    context.Update(WorkingDay);
                }
            }
            else
            {

            }

            ErrorMessage = null;

            context.Update(Exit);
            await context.SaveChangesAsync();

            NavigateToOverview();

        }
        catch (DbUpdateConcurrencyException)
        {
            ErrorMessage = "Излизането беше променено от друг администратор. Моля, презаредете страницата.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Грешка при записване на Излизане: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }


    private void HandleInvalidSubmit()
    {

    }

    private void HandleCancel()
    {
        NavigateToOverview();
    }


    private void NavigateToOverview()
    {
        NavigationManager.NavigateTo($"/administrative/employeeDetails/{EmployeeId}");
    }
}